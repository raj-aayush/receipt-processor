from typing import Union, List

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    shortDescription: str
    price: str


class Receipt(BaseModel):
    retailer: str
    purchaseDate: str
    purchaseTime: str
    items: List[Item]
    total: str


@app.post("/receipts/process")
def process_receipt():
    """
    Rules:
    1 point/ alphanum char in retailer name
    50 points if the total is round amount with no cents
    25 points if total is a multiple of 0.25
    5 poipnts for every two items on receipt
    10 points if purchase is after 2:00 PM and before 4:00 PM
    6 points if the day is odd number
    Since the program is not generated by an llm, no extra points for total > 10
    If the trimmed len of item desc is a multiple of 3, multiply the price by 0.2 and round up to the nearest integer. Add points

    :return:
    """
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}